[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Tester\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Tester\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Amazon.com Inc. Java 11.0.23)
[debug] Load.defaultLoad until apply took 594.8595ms
[debug]                 Load.loadUnit: plugins took 97.8248ms
[debug]                 Load.loadUnit: defsScala took 1.4219ms
[debug] [Loading] Scanning directory C:\Users\Tester\spark_c\spark-course2\project\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2\project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.7466 ms
[debug]                     Load.resolveProject(spark-course2-build-build) took 45.9958ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id spark-course2-build-build, base: C:\Users\Tester\spark_c\spark-course2\project\project, plugins: List(<none>))) took 85.6654ms
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2\project\project, returning: (spark-course2-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 108.3688ms
[debug]                 Load.loadUnit: cleanEvalClasses took 2.1801ms
[debug]               Load.loadUnit(file:/C:/Users/Tester/spark_c/spark-course2/project/project/, ...) took 225.9498ms
[debug]             Load.apply: load took 374.7064ms
[debug]             Load.apply: resolveProjects took 4.1035ms
[debug]             Load.apply: finalTransforms took 65.931ms
[debug]             Load.apply: config.delegates took 7.7627ms
[debug]             Load.apply: Def.make(settings)... took 1167.147ms
[debug]             Load.apply: structureIndex took 124.233ms
[debug]             Load.apply: mkStreams took 3.4212ms
[info] loading project definition from C:\Users\Tester\spark_c\spark-course2\project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]           Load.loadUnit: plugins took 3575.9179ms
[debug]           Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory C:\Users\Tester\spark_c\spark-course2\project
[debug]             Load.loadUnit: mkEval took 8.2305ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5788 ms
[info] loading settings for project spark-course2-build from idea1.sbt ...
[debug]               Load.resolveProject(spark-course2-build) took 8.0336ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-course2-build, base: C:\Users\Tester\spark_c\spark-course2\project, plugins: List(<none>))) took 10.1524ms
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2\project, returning: (spark-course2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2277.4235ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.926ms
[debug]         Load.loadUnit(file:/C:/Users/Tester/spark_c/spark-course2/project/, ...) took 5861.1911ms
[debug]       Load.apply: load took 5862.8215ms
[debug]       Load.apply: resolveProjects took 0.0892ms
[debug]       Load.apply: finalTransforms took 6.9835ms
[debug]       Load.apply: config.delegates took 0.3484ms
[debug]       Load.apply: Def.make(settings)... took 60.8712ms
[debug]       Load.apply: structureIndex took 22.6097ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\Tester\spark_c\spark-course2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 6339.5843ms
[debug]     Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\Tester\spark_c\spark-course2
[debug]       Load.loadUnit: mkEval took 0.2159ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.0778 ms
[info] loading settings for project spark-course2 from build.sbt ...
[debug]         Load.resolveProject(spark-course2) took 30.3529ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-course2, base: C:\Users\Tester\spark_c\spark-course2, plugins: List(<none>))) took 35.5998ms
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2, returning: (spark-course2)
[debug]     Load.loadUnit: loadedProjectsRaw took 121.8877ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.9476ms
[debug]   Load.loadUnit(file:/C:/Users/Tester/spark_c/spark-course2/, ...) took 6467.5749ms
[debug] Load.apply: load took 6486.9181ms
[debug] Load.apply: resolveProjects took 0.0748ms
[debug] Load.apply: finalTransforms took 42.5407ms
[debug] Load.apply: config.delegates took 0.2535ms
[debug] Load.apply: Def.make(settings)... took 78.4894ms
[debug] Load.apply: structureIndex took 16.778ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to spark-stepik (in build file:/C:/Users/Tester/spark_c/spark-course2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64466 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64466, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-stepik (in build file:/C:/Users/Tester/spark_c/spark-course2/)
[debug] > Exec(idea-shell, None, None)
