[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Tester\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Tester\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Amazon.com Inc. Java 11.0.23)
[debug] Load.defaultLoad until apply took 662.5234ms
[debug]           Load.loadUnit: plugins took 97.0698ms
[debug]           Load.loadUnit: defsScala took 0.5324ms
[debug] [Loading] Scanning directory C:\Users\Tester\spark_c\spark-course2\project
[debug]             Load.loadUnit: mkEval took 8.8461ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.7277 ms
[info] loading settings for project spark-course2-build from idea.sbt ...
[debug]               Load.resolveProject(spark-course2-build) took 40.5136ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-course2-build, base: C:\Users\Tester\spark_c\spark-course2\project, plugins: List(<none>))) took 92.7905ms
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2\project, returning: (spark-course2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 398.0948ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.8462ms
[debug]         Load.loadUnit(file:/C:/Users/Tester/spark_c/spark-course2/project/, ...) took 509.3159ms
[debug]       Load.apply: load took 627.2554ms
[debug]       Load.apply: resolveProjects took 5.2846ms
[debug]       Load.apply: finalTransforms took 57.3204ms
[debug]       Load.apply: config.delegates took 15.3443ms
[debug]       Load.apply: Def.make(settings)... took 1553.2ms
[debug]       Load.apply: structureIndex took 130.5598ms
[debug]       Load.apply: mkStreams took 2.0747ms
[info] loading project definition from C:\Users\Tester\spark_c\spark-course2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3803.2071ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\Tester\spark_c\spark-course2
[debug]       Load.loadUnit: mkEval took 0.3509ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4499 ms
[info] loading settings for project spark-course2 from build.sbt ...
[debug]         Load.resolveProject(spark-course2) took 38.1373ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-course2, base: C:\Users\Tester\spark_c\spark-course2, plugins: List(<none>))) took 44.7671ms
[debug] [Loading] Done in C:\Users\Tester\spark_c\spark-course2, returning: (spark-course2)
[debug]     Load.loadUnit: loadedProjectsRaw took 2499.289ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.1032ms
[debug]   Load.loadUnit(file:/C:/Users/Tester/spark_c/spark-course2/, ...) took 6310.138ms
[debug] Load.apply: load took 6337.7807ms
[debug] Load.apply: resolveProjects took 0.1132ms
[debug] Load.apply: finalTransforms took 37.3398ms
[debug] Load.apply: config.delegates took 0.459ms
[debug] Load.apply: Def.make(settings)... took 101.1858ms
[debug] Load.apply: structureIndex took 29.6184ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to spark-stepik (in build file:/C:/Users/Tester/spark_c/spark-course2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62617 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62617, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-stepik (in build file:/C:/Users/Tester/spark_c/spark-course2/)
[debug] > Exec(idea-shell, None, None)
